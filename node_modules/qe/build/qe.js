!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.qe=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var types = require('./lib/types');
var classes = require('./lib/classes');

var qe = function(selector, scope) {
	if (!isQE(this)) return new qe(selector, scope);
	this.set_elements(selector, scope);
	return this;
};

var array = [];

var isQE = function(obj) {
	return obj instanceof qe;
};

var each = function(items, fn, ctx) {
	for (var i = 0, l = items.length; i < l; i++) {
		var item = items[i];
		fn.call(ctx, item);
	}
};

qe.prototype = {
	length: 0,
	push: array.push,
	splice: array.splice,
	toArray: function() {
		return Array.prototype.slice.call(this);
	},
};

qe.prototype.set_elements = function(selector, scope) {
	if (types.isElement(selector)) {
		this.push(selector);
	} else {
		if (types.isString(selector)) {
			var elements = (scope || document).querySelectorAll(selector);
		} else if (types.isArray(selector) && types.isElement(selector[0])) {
			var elements = selector;
		}
		each(elements, function(element) {
			this.push(element);
		}, this);
	}
	return this;
};

qe.prototype.each = function(fn) {
	Array.prototype.forEach.call(this, fn);
	return this;
};

qe.prototype.at = function(index) {
	return this[index];
};

qe.prototype.all = function(fn) {
	fn.call(this, this.toArray());
};

qe.prototype.has = function(name) {
	var has = 0;
	this.each(function(element) {
		if (classes.has(element, name)) has + 1;
	});
	if (has > 0) return true;
	return false;
};

qe.prototype.add = function(name) {
	this.each(function(element) {
		classes.add(element, name);
	});
	return this;
};

qe.prototype.remove = function(name) {
	this.each(function(element) {
		classes.remove(element, name);
	});
	return this;
};

qe.prototype.toggle = function(name) {
	this.each(function(element) {
		classes.toggle(element, name);
	});
	return this;
};

module.exports = qe;
},{"./lib/classes":2,"./lib/types":3}],2:[function(require,module,exports){
function indexOf(arr, item) {
	return Array.prototype.indexOf.call(arr, item);
}

module.exports = {
	get : function(element) {
		return element.classList ? element.classList : element.className.split(/\s+/);
	},
	has : function(element, name) {
		return element.classList ? element.classList.contains(name) : !! ~indexOf(classes.get(element), name);
	},
	add : function(element, name) {
		name = name.trim();
		if (element.classList) {
			return element.classList.add(name);
		}
		classes = classes.get(element);
		var index = indexOf(classes, name);
		if (!~index) classes.push(name);
		element.className = classes.join(' ');
		return element;
	},
	remove : function(element, name) {
		name = name.trim();
		if (element.classList) {
			return element.classList.remove(name);
		}
		classes = classes.get(element);
		var index = indexOf(classes, name);
		if (~index) classes.splice(index, 1);
		element.className = classes.join(' ');
		return element;
	},
	toggle : function(element, name) {
		name = name.trim();
		if (element.classList) {
			return element.classList.toggle(name);
		}
		return classes.has(element, name) ? classes.remove(element, name) : classes.add(element, name);
	},
};
},{}],3:[function(require,module,exports){
var toString = function(obj) {
	return Object.prototype.toString.call(obj);
}

module.exports = {
	isElement : function(node) {
		return node.nodeName && (node.nodeType === 1 || node.nodeType === 3 ||  node.nodeType === 9 || node.nodeType === 11);
	},
	isString : function(value) {
		return toString(value) === '[object String]';
	},
	isArray : function(obj) {
		return toString(obj) === '[object Array]';
	},
	isObject : function(obj) {
		return obj !== null && toString(obj) === '[object Object]';
	},
	isFunction : function(obj) {
		return toString(obj) === '[object Function]';
	}
};
},{}]},{},[1])(1)
});