var types = require('./lib/types');
var classes = require('./lib/classes');

var qe = function(selector, scope) {
	if (!isQE(this)) return new qe(selector, scope);
	this.set_elements(selector, scope);
	return this;
};

var array = [];

var isQE = function(obj) {
	return obj instanceof qe;
};

var each = function(items, fn, ctx) {
	for (var i = 0, l = items.length; i < l; i++) {
		var item = items[i];
		fn.call(ctx, item);
	}
};

qe.prototype = {
	length: 0,
	push: array.push,
	splice: array.splice,
	toArray: function() {
		return Array.prototype.slice.call(this);
	},
};

qe.prototype.set_elements = function(selector, scope) {
	if (types.isElement(selector)) {
		this.push(selector);
	} else {
		if (types.isString(selector)) {
			var elements = (scope || document).querySelectorAll(selector);
		} else if (types.isArray(selector) && types.isElement(selector[0])) {
			var elements = selector;
		}
		each(elements, function(element) {
			this.push(element);
		}, this);
	}
	return this;
};

qe.prototype.each = function(fn) {
	Array.prototype.forEach.call(this, fn);
	return this;
};

qe.prototype.at = function(index) {
	return this[index];
};

qe.prototype.all = function(fn) {
	fn.call(this, this.toArray());
};

qe.prototype.has = function(name) {
	var has = 0;
	this.each(function(element) {
		if (classes.has(element, name)) has + 1;
	});
	if (has > 0) return true;
	return false;
};

qe.prototype.add = function(name) {
	this.each(function(element) {
		classes.add(element, name);
	});
	return this;
};

qe.prototype.remove = function(name) {
	this.each(function(element) {
		classes.remove(element, name);
	});
	return this;
};

qe.prototype.toggle = function(name) {
	this.each(function(element) {
		classes.toggle(element, name);
	});
	return this;
};

module.exports = qe;